name: PR Labeler

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened

permissions:
  contents: read
  pull-requests: write

jobs:
  label:
    name: Auto-label PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Label by size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const total = additions + deletions;

            // Remove existing size labels
            const existingSizeLabels = pr.labels
              .filter(label => label.name.startsWith('size/'))
              .map(label => label.name);

            for (const label of existingSizeLabels) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                name: label
              });
            }

            // Add new size label
            let sizeLabel;
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 50) {
              sizeLabel = 'size/S';
            } else if (total < 200) {
              sizeLabel = 'size/M';
            } else if (total < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [sizeLabel]
            });

            console.log(`Added label: ${sizeLabel} (${total} changes)`);

      - name: Label by conventional commit type
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();

            const typeMapping = {
              'feat': 'enhancement',
              'feature': 'enhancement',
              'fix': 'bug',
              'docs': 'docs',
              'chore': 'chore',
              'refactor': 'refactor',
              'test': 'test',
              'perf': 'performance',
              'ci': 'ci',
              'build': 'ci',
              'style': 'chore',
              'breaking': 'breaking-change',
              'security': 'security'
            };

            const labelsToAdd = [];

            // Check conventional commit prefix
            for (const [type, label] of Object.entries(typeMapping)) {
              const regex = new RegExp(`^${type}[:(]`, 'i');
              if (regex.test(title) || title.includes(type)) {
                labelsToAdd.push(label);
                break;
              }
            }

            // Check for breaking changes
            if (title.includes('breaking') || title.includes('!:')) {
              labelsToAdd.push('breaking-change');
            }

            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labelsToAdd
              });

              console.log(`Added labels: ${labelsToAdd.join(', ')}`);
            }

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            if (body.trim().length < 20) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `⚠️ **Missing PR Description**\n\nPlease add a meaningful description to your PR. Include:\n- What changes were made\n- Why these changes are needed\n- Any relevant context or issue references`
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['needs-description']
              });
            }
