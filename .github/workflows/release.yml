name: Publish to npm

on:
  release:
    types:
      - published

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm install --no-audit --no-fund

      - name: Run tests
        run: npm test

      - name: Extract version from release tag
        id: version
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Extracted version: $VERSION from tag: $TAG"

      - name: Update package.json version
        run: |
          npm version "${{ steps.version.outputs.version }}" --no-git-tag-version --allow-same-version
          git add package.json
          git commit -m "chore(release): ${{ steps.version.outputs.version }}" || echo "No changes to commit"

      - name: Push version update
        run: |
          git push origin main || echo "Nothing to push"

      - name: Build package
        run: npm pack

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Get previous release
        id: prev_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            // Find the previous release (skip the current one)
            const currentTag = '${{ github.event.release.tag_name }}';
            const previousRelease = releases.data.find(r => r.tag_name !== currentTag && !r.draft);

            if (previousRelease) {
              core.setOutput('tag', previousRelease.tag_name);
              console.log(`Previous release: ${previousRelease.tag_name}`);
            } else {
              core.setOutput('tag', '');
              console.log('No previous release found');
            }

      - name: Upload npm package to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ steps.version.outputs.version }}';
            const packageFile = `ccmcp-${version}.tgz`;

            // Check if file exists
            if (!fs.existsSync(packageFile)) {
              console.log(`Package file ${packageFile} not found, skipping upload`);
              return;
            }

            // Upload the asset
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: packageFile,
              data: fs.readFileSync(packageFile)
            });

      - name: Comment on related PRs
        if: steps.prev_release.outputs.tag != ''
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const tag = '${{ steps.version.outputs.tag }}';
            const prevTag = '${{ steps.prev_release.outputs.tag }}';

            if (!prevTag) {
              console.log('No previous release tag, skipping PR comments');
              return;
            }

            try {
              // Get all merged PRs since last release
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: prevTag,
                head: tag
              });

              // Extract PR numbers from commit messages
              const prNumbers = new Set();
              for (const commit of comparison.commits) {
                const match = commit.commit.message.match(/#(\d+)/g);
                if (match) {
                  match.forEach(pr => prNumbers.add(parseInt(pr.replace('#', ''))));
                }
              }

              console.log(`Found ${prNumbers.size} PRs to notify`);

              // Comment on each PR
              for (const prNumber of prNumbers) {
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `ðŸŽ‰ This PR has been included in release [${tag}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tag})!\n\nThe package is now available on npm: \`npm install ccmcp@${version}\``
                  });
                  console.log(`Commented on PR #${prNumber}`);
                } catch (error) {
                  console.log(`Failed to comment on PR #${prNumber}: ${error.message}`);
                }
              }
            } catch (error) {
              console.log(`Error processing PR comments: ${error.message}`);
            }